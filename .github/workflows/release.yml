name: release

on:
  release:
    types: [ published ] 
    
jobs:
  
  release:
    runs-on: ubuntu-latest

    steps:
    
    - uses: actions/checkout@v2
      
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
        
    - name: Modify setup.py version
      run: |
        sed -i -E 's|version=\".*?\"|version="${{ github.event.release.tag_name }}"|g' setup.py

    - name: substitute '[vermin_output]' with vermin output
      if: ${{ contains(github.event.release.body, '[vermin_output]') }}
      run: |
        pip install vermin
        VERMIN_OUTPUT=$(vermin --no-parse-comments --no-config-file -q .)
        BODY="${{ github.event.release.body }}"
        NEW_BODY=${BODY//"[vermin_output]"/$VERMIN_OUTPUT}
        echo $NEW_BODY
        JSON=\''{"body": "'"$NEW_BODY"'"}'\'
        echo $JSON
        curl \
          -X PATCH \
          -H "Accept: application/vnd.github.v3+json" \
          -u ${{ github.event.sender.login }}:${{ secrets.GITHUB_TOKEN }} \
          ${{ github.event.release.url }} \
          -d $JSON
    - name: Build
      run: |
        python setup.py sdist bdist_wheel

    - name: Upload release assets
      uses: AButler/upload-release-assets@v2.0
      with:
        files: dist/*
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-tag: ${{ github.event.release.tag_name }}

    - name: Publish to test-pypi
      run: |
        twine upload dist/* --repository testpypi -u __token__ -p ${{ secrets.TEST_PYPI_PASSWD }} --non-interactive --disable-progress-bar -c "${{ github.event.release.body }}"
        
    - name: Publish to pypi
      if: "!github.event.release.prerelease"
      run: |
        twine upload dist/* --repository pypi -u __token__ -p ${{ secrets.PYPI_PASSWD }} --non-interactive --disable-progress-bar -c "${{ github.event.release.body }}"
    
  